# Name of the Launch Configuration
ec2_launch_configuration_name: "test-ansible-ecs-lc"
ecs_cluster_name: "test-ansible-ecs"
# Name of this environment, e.g. development, test, staging, production
env: development
key_name: "test-ansible-ecs"
ec2_security_groups: "sg-ecf7f198" 
ec2_asg_vpc_subnets: ['subnet-d1517bb4', 'subnet-8533c8df']
# EC2 instance type to use
ec2_instance_type: "t2.micro"
ec2_asg_availability_zones: ['us-east-1a' , 'us-east-1b'] 
# EC2 image that contains a Docker server + ECS Agent, AWS provides a suitable default
ec2_ami_id: "ami-28456852"

# Name that will be given to EC2 instances created as part of auto-scaling
ec2_instance_name: "test-ansible-ecs-instance"

# IAM role that will be used to call the AWS ECS API.  This is normally created when you create a default cluster through the AWS console
ecs_instance_profile_name: "ecsInstanceRole"

# If you want the instances to be directly remotely accessible
ec2_assign_public_ip: true

# If you want AWS to monitor the EC2 instance for you
ec2_instance_monitoring: true

# Needed to register the EC2 instance with ECS
ec2_userdata: |
  Content-Type: multipart/mixed; boundary="==BOUNDARY=="
  MIME-Version: 1.0

  --==BOUNDARY==
  MIME-Version: 1.0
  Content-Type: text/text/x-shellscript; charset="us-ascii"
  #!/bin/bash

  # Set cluster name in ECS config
  echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config;

  --==BOUNDARY==--

# Name of the Auto Scaling Group
ec2_asg_name: "{{ ecs_cluster_name }}-asg"

# Minimum number of EC2 instances to keep running
ec2_asg_min_size: 1

# Maximum number of EC2 instances to keep running
ec2_asg_max_size: 4

# Desired number of EC2 instances to keep running under normal conditions
ec2_asg_desired_capacity: 1

# Tags to set on any EC2 instances created as part of the auto scaling group
ec2_asg_tags:
  - Name: "{{ vpc_name }}_{{ ec2_instance_name }}"

vpc_name: "test"
# Wait for EC2 instances within the auto scaling group to become available before moving on to the next task
ec2_asg_wait: true

# Perform a rolling update if the Launch Configuration has changed
ec2_asg_replace_all_instances: yes

# Health check interval
ec2_asg_health_check_period: 60

# Method for performing the health check
ec2_asg_health_type: EC2

# Scaling cooldown period
ec2_asg_default_cooldown: 300

# Default component state
ecs_state: "present"
ec2_lc_state: "present"
ec2_asg_state: "present"
